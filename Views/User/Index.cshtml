@using ASP_P22.Models.User
@{
    ViewData["Title"] = "User Page";
    bool? validationStatus = (bool?)ViewData["validationStatus"];
    Dictionary<string, string>? errors = ViewData["errors"] as Dictionary<string, string>;
    UserSignUpFormModel? formModel = ViewData["formModel"] as UserSignUpFormModel;
}

<div class="text-center">
    <h1 class="display-4">Реєстрація нового користувача</h1>
</div>

<hr/>

<form asp-action="SignUp" >
    <div class="row">
        <div class="col">
            <div class="input-group mb-3">
                <span class="input-group-text" id="name-addon"><i class="bi bi-person-vcard"></i></span>
                @{
                    bool hasError = validationStatus == false && (errors?.ContainsKey("UserName") ?? false);
                }
                <input name="UserName" type="text" class="form-control @(hasError ? "is-invalid" : (validationStatus != null) ? "is-valid" : "")"
                       value="@formModel?.UserName"
                       placeholder="Ім'я користувача" aria-label="Username" aria-describedby="name-addon">
                @if (hasError)
                {
                    <div class="invalid-feedback">
                        @errors?["UserName"]
                    </div>
                }
            </div>
        </div>
        <div class="col">
            <div class="input-group mb-3">
                <span class="input-group-text" id="email-addon"><i class="bi bi-envelope-at"></i></span>
                @{
                    hasError = validationStatus == false && (errors?.ContainsKey("UserEmail") ?? false);
                }
                <input name="UserEmail" type="email" class="form-control @(hasError ? "is-invalid" : (validationStatus != null) ? "is-valid" : "")"
                       value="@formModel?.UserEmail"
                       placeholder="E-mail" aria-label="Email" aria-describedby="email-addon">
                @if (hasError)
                {
                    <div class="invalid-feedback">
                        @errors?["UserEmail"]
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="input-group mb-3">
                <span class="input-group-text" id="login-addon"><i class="bi bi-key"></i></span>
                @{
                    hasError = validationStatus == false && (errors?.ContainsKey("UserLogin") ?? false);
                }
                <input name="UserLogin" type="text" class="form-control @(hasError ? "is-invalid" : (validationStatus != null) ? "is-valid" : "")"
                       value="@formModel?.UserLogin"
                       placeholder="Логін" aria-label="Login" aria-describedby="login-addon">
                @if (hasError)
                {
                    <div class="invalid-feedback">
                        @errors?["UserLogin"]
                    </div>
                }
            </div>
        </div>
        <div class="col">
            <div class="input-group mb-3">
                <label class="input-group-text" for="inputGroupFile01"><i class="bi bi-person-square"></i></label>
                <input type="file" class="form-control" id="inputGroupFile01">
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="input-group mb-3">
                <span class="input-group-text" id="password1-addon"><i class="bi bi-lock"></i></span>
                @{
                    hasError = validationStatus == false && (errors?.ContainsKey("Password1") ?? false);
                }
                <input name="Password1" type="password" class="form-control @(hasError ? "is-invalid" : (validationStatus != null) ? "is-valid" : "")"
                       placeholder="Пароль" aria-label="Password" aria-describedby="password1-addon"
                       value="@(validationStatus == false ? null : formModel?.Password1)">
                @if (hasError)
                {
                    <div class="invalid-feedback">
                        @errors?["Password1"]
                    </div>
                }
            </div>
        </div>
        <div class="col">
            <div class="input-group mb-3">
                <span class="input-group-text" id="password2-addon"><i class="bi bi-unlock"></i></span>
                @{
                    hasError = validationStatus == false && (errors?.ContainsKey("Password2") ?? false);
                }
                <input name="Password2" type="password" class="form-control @(hasError ? "is-invalid" : (validationStatus != null) ? "is-valid" : "")"
                       placeholder="Повторити пароль" aria-label="Password" aria-describedby="password2-addon"
                       value="@(validationStatus == false ? null : formModel?.Password2)">
                @if (hasError)
                {
                    <div class="invalid-feedback">
                        @errors?["Password2"]
                    </div>
                }
            </div>
        </div>
    </div>
    
    <button type="submit" class="btn btn-outline-secondary">Зареєструватися</button>
</form>

<hr/>

<h2>Моделі в ASP</h2>

<p>
    З метою передачі комплексних даних в ASP вживаються моделі. Це класи, які мають лише властивості
    і призначені для поєднання різних данних до однієї "капсули".
</p>
<p>Моделі поділяють на:</p>
<ul>
    <li>моделі форм (FormModel) ;</li>
    <li>моделі представлень (ViewModel, PageModel) ;</li>
    <li>моделі даних (Entity) ;</li>
</ul>
<p>Оброблення POST-запитів не повинно завершуватися відображенням сторінки.</p>

@Html.DisplayFor(m => ViewData["formModel"])